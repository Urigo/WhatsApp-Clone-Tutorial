So far we've been developing the app and we've been treating it as if there's no other users; we're the only one exists. 
This approach is true when we want to develop a UI and focus on UX, but comes a point where we need to start thinking on a macro level. 
Our app is social interactive, and if things work properly for me, it doesn't mean that it works properly to the fellow I'm chatting with. 
It's inevitable to have an authentication system in our app, hence we need to take care of things before we get to that stage.

Try to open 2 instances of the app in 2 separate tabs/windows, and navigate into the same chat room. 
Try to send a message with one instance and notice that the second instance doesn't update unless we refresh the page.


![ezgif com-video-to-gif (2)](https://user-images.githubusercontent.com/7648874/55079371-fbd87080-50d6-11e9-8ade-5ffeed6eaf8d.gif)


This issue is very important and should be addressed, because a chat is all about sending and receiving messages on a lively basis. 
This issue was expected, as there's no mechanism that would trigger and listen to changes in the back-end. 
In this chapter we're gonna address that issue by implementing exactly that mechanism.

**Introducing: GraphQL Subscriptions**

[GraphQL subscriptions](https://github.com/apollographql/graphql-subscriptions) is a mechanism that works on [web-sockets](https://en.wikipedia.org/wiki/WebSocket) and live communication; clients can subscribe to it and be notified regards specific changes that happen in the back-end. Notifications will be triggered manually by us and can be provided with parameters that provide additional information regards the triggered event. For example, a `messageAdded` will be published with the new message, and will notify all clients who are subscribed to that event. Once the subscribers are notified, they can respond as they would like to, such as updating the UI.



![subscription-notifications](https://user-images.githubusercontent.com/7648874/55079462-30e4c300-50d7-11e9-8399-7706da2a9cff.png)


A subscription is presented in our GraphQL schema as a separate type called `Subscription`, where each field represents an event name along with its return type. 
Like any other GraphQL type, each field should be match with a resolver where we handle the request.

In this chapter we will implement the `messageAdded` subscription, so users can be notified when it happens and update the messages list to contain the new message.

**Implementing a subscription**

We will start by creating a new `Subscription` type in our GraphQL schema with the field `messageAdded`:

{{{ diffStep 7.1 module="server" }}}

Changes are triggered using an event-emitter like object called `PubSub`. This can be done using the `PubSub.prototype.publish` method. We will create a new instance of it and will provide it via the [context](https://www.apollographql.com/docs/apollo-server/essentials/data#context) - a common pattern for providing objects which are useful for the execution of the resolvers:

TODO: Explain what the context is

{{{ diffStep 7.2 module="server" }}}

Inside the `addMessage` resolver we will publish a new event called `messageAdded`. The 3rd argument of the resolver will be the context object that we've just defined in the previous step, where we can use the pubsub instance. The TypeScript type of our context can be directly defined and generated by CodeGen through the `codegen.yml` file. This can be specified under the `ContextType` field with the file path that contains the context followed by the name of the exported object, like so:

{{{ diffStep 7.3 module="server" }}}

The event will be published right after the message was pushed into the messages collection, because order is a crucial thing. We don't want to notify our users unless the change has been made. The event will have a single parameter which represents the new message.

{{{ diffStep 7.4 module="server" }}}

A subscription resolver behaves differently and thus should be implemented differently. Using the `pubsub.asyncIterator` instance, we can specify which events are relevant for the subscription, for example, all clients who are subscribers of the `chatUpdated` subscription will be notified when `messageAdded`, `messageRemoved` and `chatInfoChanged` events were triggered. For now, we will have a 1 to 1 relationship between the `messageAdded` event and `messageAdded` subscription. In code, it should look like this:

{{{ diffStep 7.5 module="server" }}}

The idea behind the `pubsub.asyncIterator` method is that it returns an [`Iterator`](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators#Iterators) like object, where each value is a promise that will be resolved when the relevant events are triggered. By default, the parameter that has a similar name to the subscription will be returned as a response, e.g. `messageAdded` parameter will be sent back to the subscribers. This behavior can be modified as explained [here](https://github.com/apollographql/graphql-subscriptions#payload-manipulation), but it's very unlikely and not necessary for our use case.

As mentioned at the beginning of this article, there needs to be an open connection between the client and the server so live updates can happen. There are serveral methods for doing so, but the 2 most popular ones are:



*   Based on polling with HTTP protocol
*   Based on web-sockets (WS protocol)

HTTP polling means that each amount of time an HTTP request will be made to the server where potential changes can be sent back to us at any given time. HTTP requests are very reliable, but the problem with them is that they contain a lot of information in their headers, so even if we sent an empty request, it might be still very heavy due to cookies, user-agent, language, request type, etc.

With web-sockets, once a connection has been established, it will remain open and it will only send the information which is relevant for the current session, so it's much faster. The communication is between the server and the client is bi-directional when it comes to web-sockets, which means that a user can spontaneously receive information from the server, as long as the communication channel remains open.

> More information about the advantages of Web Sockets over HTTP can be found at [websocket.org](http://websocket.org/quantum.html)

The subscription mechanism can be installed using the `server.installSubscriptionHandlers`. It will use the WS protocol by default and will fallback to HTTP polling if there were troubles establishing a connection via WS protocol:

{{{ diffStep 7.6 module="server" }}}

Now we have everything set and we can start listening to subscriptions and react to to triggered changes.

**Using subscriptions**

To support subscriptions we need to establish a WS connection. For that we will need to update our Apollo client. We will install a couple of packages that will enable such feature:

    $ yarn add subscriptions-transport-ws apollo-link apollo-link-ws apollo-utilities


*   [`subscriptions-transport-ws`](https://www.npmjs.com/package/subscriptions-transport-ws) - a transport layer that understands how client and GraphQL API communicates with each other. The spec has GQL_INIT GQL_UPDATE GQL_DATA events.
*   [`apollo-link-ws`](https://www.npmjs.com/package/apollo-link-ws) - Will establish a WS connection.
*   [`apollo-link`](https://www.npmjs.com/package/apollo-link) - Will enable WS and HTTP connections co-exist in a single client.
*   [`apollo-utilities`](https://www.npmjs.com/package/apollo-utilities) - Includes utility functions that will help us analyze a GraphQL AST.

The WS url can be composed by simply running a regular expression over the `REACT_APP_SERVER_URL` environment variable and is unnecessary to be stored separately. Here's how our new client should look like: \


{{{ diffStep 10.1 module="client" files="client" }}}

Our subscription listeners should live globally across our application and shouldn't be bound to a specific component, thus we will create an external service which will be responsible of doing so. Using that service, we will update our GraphQL data-store any time a new message has been added. We will define a `messageAdded` subscription in a dedicated file under the `src/graphql/subscriptions` dir where all our subscriptions will be defined and exported:

TODO: - but they are anyway. Itâ€™s just a standalone function that is used in a component. Which makes no difference.

{{{ diffStep 10.2 module="client" }}}

Now we will create the service under the path `services/cache.service.ts`. Like any other GraphQL operation, `react-apollo-hooks` provides us with a dedicated React hook for subscriptions called `useSubscription`. Given the subscription document and the `onSubscriptionData` callback we can handle incoming changes. We will be using GraphQL Code Generator to generate typed subscription hooks, as the `typescript-react-apollo` plug-in supports it right out of the box. First let's update the `codegen.yml` file to look for documents in the `graphql/subscriptions` dir:

{{{ diffStep 10.3 module="client" }}}

And then we will type the code generation command:

    $ npm run codegen

Now we can import and use the newly generated hook `useMessageAddedSubscription` in the `cache.service`. Like mentioned earlier, we will be using the `onSubscriptionData` callback to retrieve the change that was sent by the server and we will use it to re-write our cache. In this case we will be writing a new fragment for the incoming message, and we will update the correlated chat:

{{{ diffStep 10.4 module="client" files="cache.service" }}}

We will also use the exported `writeMessage()` function in the `ChatRoomScreen` so we won't have any code duplications:

{{{ diffStep 10.4 module="client" files="ChatRoom" }}}

One thing missing that you might notice is that we're trying to retrieve the chat from the received message, unfortunately our GraphQL schema doesn't support it and we will need to add it. On the server, we will add a `chat` field to the `Message` type in the GraphQL schema, and we will implement a resolver which will lookup for the chat in the chats collection:

{{{ diffStep 7.7 module="server" }}}

Now that we have it supported we can update the `Message` fragment in the client to include that information. We don't need the entire chat, only its ID, since the fragment ID composition is done out of an ID and type name:

{{{ diffStep 10.5 module="client" }}}

Finally, we will import the `useCacheService` React hook that we've just created and we will use it in our main `App` component. This means that the cache service will start listening for changes right as the app component is mounted:

{{{ diffStep 10.6 module="client" }}}

Subscription handling is complete! If you'll try to repeat the same process again where you check messages updating between 2 instances of the app, you should see them both update.

-------

TODO: `useCacheService` shouldnâ€™t be called like that since itâ€™s related to message events and cache updates are only side-effects.